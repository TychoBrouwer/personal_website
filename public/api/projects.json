{
  "projects": [
    {
      "image": "esp32_remote_car",
      "imageSecondary": "esp32_remote_car",
      "imageLogo": "",
      "name": "esp32_remote_car",
      "title": "ESP32 Remote Car",
      "tags": [
        "current"
      ],
      "description": "This project is about learning to work with microcontrollers, electrical components, and writing the code for them. The robot is controlled by an ESP32 microcontroller, and uses two MX1508 DC-motor drivers to drive the four 5V cheap motors. The speed of the wheels is tracked using four light slot sensors. The robot can be controlled using a webserver hosted on the ESP's IP-address. The webinterface communicates back to the microcontroller using a websocket connection.",
      "sections": [
        {
          "text": "The car has four 3-6 volt DC motors with a peak current draw of about 200mA. A 100nF capacitor is soldered to the terminals of each motor to reduce the noise they produce. The motors are controlled using two MX1508 DC-motor drivers. The drivers are controlled using PWM signals from the ESP32, these are generated using the LEDC library.",
          "image": "esp32_remote_car_4"
        },
        {
          "text": "The speed of the motors is tracked using four light slot sensors. The ESP32 detects the slot sensors passing to calculate the speed of the motor using interrupts on the pins to which the sensors are connected.",
          "image": "esp32_remote_car_6"
        }
      ],
      "links": [
        {
          "name": "Read More",
          "route": "/projects/esp32_remote_car"
        },
        {
          "name": "GitHub Repo",
          "route": "https://github.com/TychoBrouwer/esp32-remote-car"
        }
      ]
    },
    {
      "image": "mail_app",
      "imageSecondary": "mail_app",
      "imageLogo": "",
      "name": "mail_app",
      "title": "Mail Client App",
      "tags": [
        "current"
      ],
      "description": "A mail client for desktop made using flutter. The goal of this project is to make a client which simply does your mail, with the ability to customize the client by disabling features you do not need. In the current state the client can read rendered HTML emails from one or multiple IMAP servers. The app is not tested for platforms other than Windows at the moment.",
      "sections": [],
      "links": [
        {
          "name": "Read More",
          "route": "/projects/mail_app"
        },
        {
          "name": "GitHub Repo",
          "route": "https://github.com/TychoBrouwer/mail_app_flutter"
        }
      ]
    },
    {
      "image": "ac_controller",
      "imageSecondary": "ac_controller",
      "imageLogo": "",
      "name": "ac_controller",
      "title": "Universal AC Controller",
      "description": "This is a course Detailing, Realization and RPC Testing and part of the USE (User, Society, and Enterprise) learning trajectory of my study. It aims to let students experience that the design of a product needs constant interaction with the proposed use. This means going through an product design cycle with real customer/user involvement. And learning how to define and study a potential market, how to involve user demands into a technical design and how to evaluate the design in a user context.",
      "sections": [
        {
          "text": "During the project a concept design was first made after which a more complete prototype was manufactured. The product aims to allow an IR controlled air conditioner to become a smart air conditioner. The user can control their AC unit remotely using an app. The server can also relay weather information to the local device for smart temperature control by the air conditioner.",
          "image": "ac_controller_3"
        },
        {
          "text": "Tge device is controlled by an ESP32 microcontroller is powered either from a USB power supply or a 5V battery. It has an IR transmitter and receiver to control the AC unit by imitating the original remote. It is connected to the internet using WiFi and communicates with the server using a websocket connection. Communication between the webapp and the server is done using a REST API.",
          "image": "ac_controller_2"
        }
      ],
      "links": [
        {
          "name": "Read More",
          "route": "/projects/ac_controller"
        },
        {
          "name": "GitHub Repo",
          "route": "https://github.com/TychoBrouwer/ac-controller-api-socket-python"
        }
      ]
    },
    {
      "image": "food_alarm",
      "imageSecondary": "food_alarm_2",
      "imageLogo": "food_alarm_logo",
      "name": "food_alarm",
      "title": "Food Alarm App",
      "description": "An mobile app made for the course Engineering Design, using React Native and Expo Go. The app's goal is to decrease food waste, it attempts to achieve this by allowing the user to track the food which is in the users house. It also provides a grocery store list and recipe database linked to the food stored in the inventory.",
      "sections": [
        {
          "text": "The mobile app is written in React Native using Expo Go. React Native is an open-source framework for JavaScript. It combines React, with app development for iOS and Android. Expo is an open-source platform for making mobile apps and it removes the necessity for an iOS and Android developer account for testing the app. Expo achieves this by hosting the app on the Expo Go mobile app. The back-end server for the app, which will be used as an authorization and database server, is made using Express.js.",
          "image": ""
        }
      ],
      "links": [
        {
          "name": "Read More",
          "route": "/projects/food_alarm"
        },
        {
          "name": "GitHub Repo",
          "route": "https://github.com/TychoBrouwer/food-app-react-native"
        }
      ]
    },
    {
      "image": "pokemon_like_game",
      "imageSecondary": "pokemon_like_game_2",
      "imageLogo": "",
      "name": "pokemon_like_game",
      "title": "Pokémon Inspired Game",
      "description": "A Pokémon inspired game written using Electron, TypeScript, and SCSS, more specifically the Pokémon Ruby version. The game is drawn onto an HTML canvas using request animation frame to invoke the repaint. The game has basic fighting mechanics following the original from Pokémon Ruby.",
      "sections": [],
      "links": [
        {
          "name": "Read More",
          "route": "/projects/pokemon_like_game"
        },
        {
          "name": "GitHub Repo",
          "route": "https://github.com/TychoBrouwer/pokemon-game-electron"
        }
      ]
    },
    {
      "image": "snake_game",
      "imageSecondary": "snake_game",
      "imageLogo": "",
      "name": "snake_game",
      "title": "Snake Game",
      "description": "A snake game made using Electron, TypeScript, and SCSS. The game counts the current score and saves the high score. The player can also adjust the game speed and board size. ",
      "sections": [],
      "links": [
        {
          "name": "Read More",
          "route": "/projects/snake_game"
        },
        {
          "name": "GitHub Repo",
          "route": "https://github.com/TychoBrouwer/snake_game_electron"
        }
      ]
    }
  ]
}